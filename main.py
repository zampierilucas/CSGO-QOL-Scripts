import pyautogui
import time
import screen_brightness_control as sbc
from win32gui import GetWindowText, GetForegroundWindow
from win32con import WM_INPUTLANGCHANGEREQUEST
from win32api import SendMessage
import base64
import yaml
import os
import subprocess
from globalhotkeys import GlobalHotKeys
import threading
from homeassistant_api import Client

config = ''
with open("config.yaml") as f:
    config = yaml.safe_load(f)

client = Client(config['hass_url'], config['hass_token'])
light  = client.get_domain("light")

# Check if config file exists
if not os.path.exists('config.yaml'):
    print("Missing config.yaml file")
    os._exit(os.EX_OK)

# Accept csgo
encoded_accept_csgo = "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"
encoded_accept_lol = "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"


def accept_match(img_base64):
    with open("accept.png", "wb") as f:
        f.write(base64.b64decode(img_base64))
    f.close()

    accept_btn = pyautogui.locateCenterOnScreen("accept.png", confidence=0.8)

    if accept_btn != None:
        pyautogui.click(accept_btn)
        pyautogui.move(0, 300)


def set_brigtness_side_monitors(brightness):
    for monitor in config["dimmable_monitors"]:
        sbc.set_brightness(brightness, display=monitor)


@GlobalHotKeys.register(GlobalHotKeys.VK_1, "VK_1", GlobalHotKeys.MOD_ALT)
def turn_on_room_light():
    client.get_domain("light").toggle(entity_id="light.escritorio_1")


@GlobalHotKeys.register(GlobalHotKeys.VK_3, "VK_3", GlobalHotKeys.MOD_ALT)
def toggle_ac():
    client.get_domain("script").toggle(entity_id="script.toggle_ac")


@GlobalHotKeys.register(GlobalHotKeys.VK_4, "VK_4", GlobalHotKeys.MOD_ALT)
def decrease_ac():
    client.get_domain("script").toggle(entity_id="script.heat_down")


@GlobalHotKeys.register(GlobalHotKeys.VK_5, "VK_5", GlobalHotKeys.MOD_ALT)
def increase_ac():
    client.get_domain("script").toggle(entity_id="script.heat_up")


@GlobalHotKeys.register(GlobalHotKeys.VK_9, "VK_9", GlobalHotKeys.MOD_ALT)
def lower_brightness_monitor():
    set_brigtness_side_monitors(config['monitor_brightness']['low'])


@GlobalHotKeys.register(GlobalHotKeys.VK_0, "VK_0", GlobalHotKeys.MOD_ALT)
def increase_brightness_monitor():
    set_brigtness_side_monitors(config["monitor_brightness"]['high'])


@GlobalHotKeys.register(GlobalHotKeys.VK_F10, "VK_F10", GlobalHotKeys.MOD_ALT)
def kill_python():
    command_args = ['taskkill', '/IM', 'python.exe', '/F']
    subprocess.run(command_args, shell=True)


def keyboard_listener():
    GlobalHotKeys.listen()


keyboard_thread = threading.Thread(target=keyboard_listener)
keyboard_thread.daemon = True
keyboard_thread.start()


def reload_yaml():
    global config

    with open("config.yaml") as f:
        config = yaml.safe_load(f)


while True:
    reload_yaml()

    # Accept match and monitor brightness per game
    foregroundWindow = GetForegroundWindow()
    focused = GetWindowText(foregroundWindow)

    if focused in config['games_to_dimm']:
        if focused == "League of Legends":
            accept_match(encoded_accept_lol)

        if "Counter-Strike" in focused:
            accept_match(encoded_accept_csgo)

            if config['kb_languague_switch']:
                # Set kb tocw EN_US
                SendMessage(foregroundWindow, WM_INPUTLANGCHANGEREQUEST, 0, 0x0000409)

    else:
        # Set default kb language
        SendMessage(GetForegroundWindow(), WM_INPUTLANGCHANGEREQUEST, 0, 0x00020409)

    time.sleep(0.2)
